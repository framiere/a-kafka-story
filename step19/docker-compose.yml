version: '3.4'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper
    hostname: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    healthcheck:
      test: ["CMD", "bash", "-c", "echo ruok | nc localhost 2181 | grep imok"]
      start_period: 30s

  kafka-1:
    image: confluentinc/cp-kafka
    hostname: kafka-1
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-1:9092
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
    healthcheck:
      test: ["CMD", "nc", "127.0.0.1", "9092"]
      start_period: 30s

  kafka-2:
    image: confluentinc/cp-kafka
    hostname: kafka-2
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-2:9092
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
    healthcheck:
      test: ["CMD", "nc", "127.0.0.1", "9092"]
      start_period: 30s

  kafka-3:
    image: confluentinc/cp-kafka
    hostname: kafka-3
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-3:9092
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
    healthcheck:
      test: ["CMD", "nc", "127.0.0.1", "9092"]
      start_period: 30s

  mysql:
    image: mysql:5.7
    volumes:
      - ../step11/mysql.cnf:/etc/mysql/conf.d/custom.cnf
      - ./mysql-init.sql:/docker-entrypoint-initdb.d/mysql-init.sql
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: db
      MYSQL_USER: user
      MYSQL_PASSWORD: password
      MYSQL_ROOT_HOST: 172.%  # Allow docker containers to connect to mysql

  minio:
    image: minio/minio
    ports:
      - "9000:9000"
    environment:
      MINIO_ACCESS_KEY: AKIAIOSFODNN7EXAMPLE
      MINIO_SECRET_KEY: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
    command: server /data

  create-buckets:
    image: minio/mc
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
        /usr/bin/mc config host add myminio http://minio:9000 AKIAIOSFODNN7EXAMPLE wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY;
        while ! /usr/bin/mc mb myminio/cdc; do
          sleep 5
        done
        exit 0;
      "

  list-buckets:
    image: minio/mc
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
        /usr/bin/mc config host add myminio http://minio:9000 AKIAIOSFODNN7EXAMPLE wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY;
        while ! /usr/bin/mc ls -r myminio/cdc; do
          sleep 5
        done
        exit 0;
      "

  connect:
    image: confluentinc/cp-kafka-connect
    hostname: connect
    restart: always
    ports:
      - "8083:8083"
    depends_on:
      - zookeeper
      - kafka-1
      - kafka-2
      - kafka-3
      - mysql
      - minio
    environment:
      CONNECT_BOOTSTRAP_SERVERS: "kafka-1:9092,kafka-2:9092,kafka-3:9092"
      CONNECT_GROUP_ID: "connect"
      CONNECT_CONFIG_STORAGE_TOPIC: connect-config
      CONNECT_OFFSET_STORAGE_TOPIC: connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: connect-status
      CONNECT_REPLICATION_FACTOR: 2
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_INTERNAL_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_REST_ADVERTISED_HOST_NAME: "connect"
      CONNECT_PLUGIN_PATH: "/usr/share/java"
      CONNECT_LOG4J_LOGGERS: org.reflections=ERROR
      AWS_ACCESS_KEY_ID: AKIAIOSFODNN7EXAMPLE
      AWS_SECRET_ACCESS_KEY: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
    volumes:
      - ../step9/mysql-connector-java-5.1.45-bin.jar:/usr/share/java/kafka-connect-jdbc/mysql-connector-java-5.1.45-bin.jar
      - ../step11/debezium-connector-mysql:/usr/share/java/debezium-connector-mysql
    healthcheck:
      test: ["CMD", "nc", "127.0.0.1", "8083"]
      start_period: 30s

  producer:
    build: ../step18/streamjoins/
    environment:
      ACTION: producer
    depends_on:
      - kafka-1
      - kafka-2
      - kafka-3

  operationstomysql:
    build: operationtomysql/
    depends_on:
      - mysql

  cdcdiff:
    build: cdcdiff/
    depends_on:
      - kafka-1
      - kafka-2
      - kafka-3

  influxdb:
    image: influxdb:1.5.2
    ports:
      - "8086:8086"
    healthcheck:
      test: ["CMD", "influx", "-host", "127.0.0.1", "-port", "8086", "-execute", "SHOW DATABASES"]
      start_period: 30s

  grafana:
    image: grafana/grafana:5.1.2
    ports:
      - "3000:3000"
    depends_on:
      - influxdb
    environment:
      GF_INSTALL_PLUGINS: jdbranham-diagram-panel,novalabs-annotations-panel,vonage-status-panel,bessler-pictureit-panel,grafana-piechart-panel
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      start_period: 30s

  grafana-setup:
    build: ../step8/grafana-setup/
    depends_on:
      - grafana

  telegraf-topic:
    image: confluentinc/cp-kafka
    command: bash -c "cub kafka-ready -z zookeeper:2181 3 120 && kafka-topics --zookeeper zookeeper:2181 --create --topic telegraf --partitions 10 --replication-factor 3"
    depends_on:
      - zookeeper
      - kafka-1
      - kafka-2
      - kafka-3

  kafka-to-influxdb:
    image: telegraf:1.8
    restart: unless-stopped
    volumes:
      - ../step8/telegraf-kafka-to-influxdb.conf:/etc/telegraf/telegraf.conf:ro
    depends_on:
      - kafka-1
      - kafka-2
      - kafka-3
      - influxdb

  ksql-json-to-influxdb:
    image: telegraf:1.8
    restart: unless-stopped
    volumes:
      - ./ksql-json-to-influxdb.conf:/etc/telegraf/telegraf.conf:ro
    depends_on:
      - kafka-1
      - kafka-2
      - kafka-3
      - influxdb

  ksql:
    image: confluentinc/cp-ksql-server
    hostname: ksql-cli
    depends_on:
      - kafka-1
      - kafka-2
      - kafka-3
    ports:
      - "8088:8088"
    environment:
      KSQL_BOOTSTRAP_SERVERS: kafka-1:9092
      KSQL_LISTENERS: http://0.0.0.0:8088

  control-center:
    image: confluentinc/cp-enterprise-control-center
    container_name: control-center
    restart: always
    depends_on:
      - zookeeper
      - kafka-1
      - kafka-2
      - kafka-3
      - ksql
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: "kafka-1:9091,kafka-2:9092"
      CONTROL_CENTER_ZOOKEEPER_CONNECT: "zookeeper:2181"
      CONTROL_CENTER_KSQL_URL: "http://ksql:8088"
      CONTROL_CENTER_REST_LISTENERS: "http://0.0.0.0:9021"
      CONTROL_CENTER_KSQL_ADVERTISED_URL: "http://localhost:8088"
      CONTROL_CENTER_REPLICATION_FACTOR: 3
