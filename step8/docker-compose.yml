version: '3.4'
services:
  jolokia:
    image: jolokia/java-jolokia
    volumes:
      - jolokia:/opt/jolokia/

  zookeeper:
    image: confluentinc/cp-zookeeper
    hostname: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      KAFKA_OPTS: "-javaagent:/opt/jolokia/jolokia.jar=host=0.0.0.0"
    volumes:
      - jolokia:/opt/jolokia/
    healthcheck:
      test: ["CMD", "bash", "-c", "echo ruok | nc localhost 2181 | grep imok"]
      start_period: 30s

  kafka-1:
    image: confluentinc/cp-kafka
    hostname: kafka-1
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-1:9092
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_OPTS: "-javaagent:/opt/jolokia/jolokia.jar=host=0.0.0.0"
    volumes:
      - jolokia:/opt/jolokia/
    healthcheck:
      test: ["CMD", "nc", "127.0.0.1", "9092"]
      start_period: 30s

  kafka-2:
    image: confluentinc/cp-kafka
    hostname: kafka-2
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-2:9092
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_OPTS: "-javaagent:/opt/jolokia/jolokia.jar=host=0.0.0.0"
    volumes:
      - jolokia:/opt/jolokia/
    healthcheck:
      test: ["CMD", "nc", "127.0.0.1", "9092"]
      start_period: 30s

  kafka-3:
    image: confluentinc/cp-kafka
    hostname: kafka-3
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-3:9092
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_OPTS: "-javaagent:/opt/jolokia/jolokia.jar=host=0.0.0.0"
    volumes:
      - jolokia:/opt/jolokia/
    healthcheck:
      test: ["CMD", "nc", "127.0.0.1", "9092"]
      start_period: 30s

  telegraf-topic:
    image: confluentinc/cp-kafka
    command: bash -c "cub kafka-ready -z zookeeper:2181 3 120 && kafka-topics --zookeeper zookeeper:2181 --create --topic telegraf --partitions 10 --replication-factor 3"
    depends_on:
      - zookeeper
      - kafka-1
      - kafka-2
      - kafka-3

  telegraf:
    image: telegraf:1.8
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock
      - ../step7/telegraf.conf:/tmp/telegraf.conf:ro
      - ../step7/telegraf-inputs/:/tmp/telegraf-inputs/:ro
    command: telegraf -config /tmp/telegraf.conf --config-directory /tmp/telegraf-inputs
    depends_on:
      - zookeeper
      - kafka-1
      - kafka-2
      - kafka-3

  producer:
    build: ../step3/producer
    environment:
      JAVA_OPTS: "-javaagent:/opt/jolokia/jolokia.jar=host=0.0.0.0"
    volumes:
      - jolokia:/opt/jolokia/
    depends_on:
      - kafka-1
      - kafka-2
      - kafka-3

  consumer:
    build: ../step3/consumer
    environment:
      JAVA_OPTS: "-javaagent:/opt/jolokia/jolokia.jar=host=0.0.0.0"
    volumes:
      - jolokia:/opt/jolokia/
    depends_on:
      - kafka-1
      - kafka-2
      - kafka-3

  streams:
    build: ../step6/streams
    environment:
      JAVA_OPTS: "-javaagent:/opt/jolokia/jolokia.jar=host=0.0.0.0"
    volumes:
      - jolokia:/opt/jolokia/
    depends_on:
      - kafka-1
      - kafka-2
      - kafka-3
      - telegraf

  influxdb:
    image: influxdb:1.4.3
    ports:
      - "8086:8086"
    healthcheck:
      test: ["CMD", "influx", "-host", "127.0.0.1", "-port", "8086", "-execute", "SHOW DATABASES"]
      start_period: 30s

  chronograf:
    image: chronograf:1.4.0
    environment:
      INFLUXDB_URL: http://influxdb:8086
    ports:
      - "8888:8888"
    depends_on:
      - influxdb

  grafana:
    image: grafana/grafana:4.6.3
    ports:
      - "3000:3000"
    depends_on:
      - influxdb
    environment:
      GF_INSTALL_PLUGINS: jdbranham-diagram-panel,novalabs-annotations-panel,vonage-status-panel,bessler-pictureit-panel,grafana-piechart-panel
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      start_period: 30s

  grafana-setup:
    build: grafana-setup/
    depends_on:
      - grafana

  kafka-to-influxdb:
    image: telegraf:1.8
    restart: unless-stopped
    volumes:
      - ./telegraf-kafka-to-influxdb.conf:/etc/telegraf/telegraf.conf:ro
    depends_on:
      - kafka-1
      - kafka-2
      - kafka-3
      - influxdb

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:6.1.3
    restart: on-failure
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      xpack.security.enabled: "false"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200"]
      start_period: 30s

  kibana:
    image: docker.elastic.co/kibana/kibana:6.1.3
    restart: on-failure
    ports:
      - "5601:5601"
    environment:
      xpack.security.enabled: "false"
    depends_on:
      - elasticsearch
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5601"]
      start_period: 30s

  kibana_index_pattern:
    image: tutum/curl
    command: |
      bash -c "sleep 30 ; curl 'http://kibana:5601/es_admin/.kibana/index-pattern/logstash-*/_create' -H 'kbn-version: 5.5.2' -H 'content-type: application/json' --data-binary '{\"title\":\"logstash-*\",\"timeFieldName\":\"@timestamp\",\"notExpandable\":true}'"
    depends_on:
      - kibana

  logstash:
    image: logstash:7.0.0
    restart: on-failure
    command: -e "input { udp { port => 5000 codec => json } } filter { if [docker][image] =~ /^logstash/ {  drop { } } } output { elasticsearch { hosts => "elasticsearch" } }"
    depends_on:
      - elasticsearch

  logspout:
    image: bekt/logspout-logstash
    restart: on-failure
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock
    environment:
      ROUTE_URIS: logstash://logstash:5000
    depends_on:
      - logstash

volumes:
  jolokia:
